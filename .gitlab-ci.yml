image: python:3-bullseye

stages:
- test
- package
- doc
- test-package
- sonar
- publish
- deploy
- downstream

#
# Test Stage
#
.tox:  &tox
  image: python:3-bullseye
  stage: test
  variables:
    TOXENV: $CI_JOB_NAME
  before_script:
  - apt -yq update && apt install -yq rdiff-backup libldap2-dev libsasl2-dev
  - pip install tox
  script:
  - export TOXENV=${TOXENV:-$CI_JOB_NAME}
  - echo TOXENV=$TOXENV
  - useradd myuser
  - su myuser -c tox
  artifacts:
    paths:
    - coverage-*.xml
    - xunit-*.xml
    expire_in: 1 day

py3-jinja210: 
  <<: *tox

py3-jinja211: 
  <<: *tox

py3-cherrypy18: 
  <<: *tox

py3-cherrypy8-jinja210: 
  <<: *tox
  # cherrypy8 is not compatible with python 3.9
  image: python:3.8-bullseye

py3-cherrypy9-jinja211: 
  <<: *tox

rdiff-backup2:
  <<: *tox
  variables:
    TOXENV: py3-cherrypy9-jinja210
  before_script:
  - apt-get update
  - apt -y install librsync-dev libldap2-dev libsasl2-dev
  - pip install rdiff-backup tox

postgresql-12:
  <<: *tox
  services:
    - postgres:12.2-alpine
  variables:
    TOXENV: py3-cherrypy18-jinja210
    RDIFFWEB_TEST_DATABASE_URI: "postgresql://admin@postgres/test"
    POSTGRES_DB: test
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust

centos7:
  <<: *tox
  before_script:
    - yum install -y python3-pip python3-devel gcc git
    - yum -y install centos-release-scl-rh
    - yum -y install rh-python38-python-devel rh-python38-python-tkinter rh-python38-python-pip git gcc
    - scl_source enable rh-python38
    - pip3 install virtualenv tox --upgrade
    - pip3 install tox --upgrade
    - yum install -y epel-release && yum install -y rdiff-backup openldap-devel
  image: centos:7
  variables:
    TOXENV: py3-cherrypy18-jinja210
    LANG: en_US.UTF-8

centos8:
  <<: *tox
  before_script:
    - yum install -y python3-pip python3-devel gcc git
    - pip3 install virtualenv tox --upgrade
    - yum install -y epel-release && yum install -y rdiff-backup openldap-devel
  image: centos:8
  variables:
    TOXENV: py3-cherrypy18-jinja210

doc:
  <<: *tox
  stage: doc
  needs: []
  dependencies: []
  artifacts:
    paths:
    - .tox/doc/tmp/html
    expire_in: 1 day

lessc:
  <<: *tox
  stage: doc
  needs: []
  dependencies: []

package:py3: 
  stage: package
  needs: []
  script:
  - pip3 install wheel
  - python3 setup.py sdist bdist_wheel
  dependencies: []
  artifacts:
    paths:
    - dist/*.whl
    
package:docker:
  stage: package
  needs: []
  dependencies: []
  image: docker:20
  services:
  - name: docker:20-dind
  script:
  - docker build .

package:deb: 
  stage: package
  needs: []
  image: buildpack-deps:$DIST
  parallel:
    matrix:
    - DIST: buster
      BACKPORTS: deb http://deb.debian.org/debian buster-backports main
    - DIST: bullseye
    - DIST: [groovy, hirsute]
  script: |
    set -x
    set -e
    if [ ! -z "$BACKPORTS" ]; then
      echo "$BACKPORTS" > /etc/apt/sources.list.d/backports.list
    fi
    apt update
    apt -y --no-install-recommends install devscripts
    export VERSION=$(curl -L https://gitlab.com/ikus-soft/maven-scm-version/-/raw/master/version.sh 2>/dev/null | bash -s DEB)
    if [ ! -z "$BACKPORTS" ]; then
      apt build-dep -t $DIST-backports -y .
    else
      apt build-dep -y .
    fi
    dch -v "$VERSION" "automated build"
    DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b
    mkdir -p ./dist/$DIST
    mv ../rdiffweb*.deb ./dist/$DIST/
  artifacts:
    paths:
    - ./dist/*

test-package:deb:
  stage: test-package
  image: debian:buster
  needs: ["package:deb"]
  parallel:
    matrix:
    - DIST: [buster, bullseye, groovy, hirsute]
  script:
  - apt update && apt install -y ./dist/$DIST/rdiffweb*.deb
  - rdiffweb --version
  - (/usr/bin/rdiffweb &)
  - apt install -y curl
  - curl http://localhost:8080
  
publish:sonar:master:
  stage: sonar
  needs:
  - py3-cherrypy18
  image: sonarsource/sonar-scanner-cli
  only:
  - master
  variables:
    SONAR_PROJECT_BASE_DIR: "${CI_PROJECT_DIR}"
  script:
  - sonar-scanner -X -Dsonar.python.coverage.reportPath=coverage-*.xml -Dsonar.python.xunit.reportPath=xunit-py3-cherrypy18.xml -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.projectVersion=$(git describe) -Dsonar.exclusions=**/test_*.py,rdiffweb/test.py

publish:sonar:dev:
  stage: sonar
  needs:
  - py3-cherrypy18
  image: sonarsource/sonar-scanner-cli
  only:
    variables:
      - $SONAR_URL
      - $SONAR_TOKEN
  variables:
    SONAR_PROJECT_BASE_DIR: "${CI_PROJECT_DIR}"
  script:
  - sonar-scanner -X -Dsonar.python.coverage.reportPath=coverage-*.xml -Dsonar.python.xunit.reportPath=xunit-*.xml -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$CI_PROJECT_NAME-dev -Dsonar.projectVersion=$(git describe) -Dsonar.exclusions=**/test_*.py,rdiffweb/test.py

publish:deb:
  needs:
  - package:deb
  only:
    variables:
      - $NEXUS_USR
      - $NEXUS_PWD
  parallel:
    matrix:
    - DIST: [buster, bullseye, groovy, hirsute]
  script: |
    set -e
    set -x
    if [[ "$CI_COMMIT_TAG" == *.+([0-9]) ]]; then
      APT_URL="https://nexus.ikus-soft.com/repository/apt-release-${DIST}/"
    else
      APT_URL="https://nexus.ikus-soft.com/repository/apt-dev-${DIST}/"
    fi
    export FILE=$(ls -1 ./dist/$DIST/rdiffweb*.deb)
    curl --fail -u "$NEXUS_USR:$NEXUS_PWD" -H "Content-Type: multipart/form-data" --data-binary "@$FILE" "$APT_URL"
  stage: publish

publish:wheel:
  stage: publish
  only:
    variables:
      - $NEXUS_USR
      - $NEXUS_PWD
      - $NEXUS_PYPI_URL
  script: |
    set -x
    # Publish wheel
    pip3 install wheel twine readme_renderer --upgrade
    LANG="C.UTF-8" python3 -m readme_renderer README.md -o /tmp/README.html
    twine upload dist/*.whl -u $NEXUS_USR -p $NEXUS_PWD --repository-url $NEXUS_PYPI_URL
    if [[ "$CI_COMMIT_TAG" == *.+([0-9]) ]]; then
      twine upload dist/*.whl -u $PYPI_USR -p $PYPI_PWD
    fi

publish:doc:
  stage: publish
  only:
    variables:
      - $KALO_WWWDATA_PRIVATEKEY
  needs:
  - doc
  script: |
    # Publish to kalo
    eval $(ssh-agent -s)
    echo "$KALO_WWWDATA_PRIVATEKEY" | tr -d '\r' | ssh-add - > /dev/null
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    # Publish doc
    export VERSION=$(python3 setup.py --version)
    scp -r -o StrictHostKeyChecking=no .tox/doc/tmp/ www-data@kalo.ikus-soft.com:/var/www/patrikdufresne/archive/rdiffweb/doc/$VERSION/
    # Promote to latest for tags
    if [[ "$CI_COMMIT_TAG" == *.+([0-9]) ]]; then
      ssh -o StrictHostKeyChecking=no www-data@kalo.ikus-soft.com ln -fs $VERSION /var/www/patrikdufresne/archive/rdiffweb/doc/latest
    fi

deploy:demo:
  only:
    variables:
    - $GITLAB_ANSIBLE_TOKEN
  allow_failure: True
  environment:
    name: demo
    url: https://rdiffweb-demo.ikus-soft.com/
  needs: 
  - package:deb
  image: registry.gitlab.com/finestructure/pipeline-trigger
  script:
    - apk update && apk add git
    - export DEB_VERSION=$(ls -1 ./dist/bullseye/rdiffweb_*_all.deb | cut -d '_' -f 2)
    - echo DEB_VERSION=$DEB_VERSION
    # Trigger ansible-config pipeline
    - trigger -a "$ANSIBLE_PIPELINE_GITLAB_API_TOKEN" -t master -e "RDIFFWEB_VERSION=$DEB_VERSION" -p 36bae86778d901fc6b2d6453a41844 18716492
  stage: deploy
  variables:
    GIT_STRATEGY: none

bump_minarca_version:
  stage: downstream
  only:
  - tags
  script:
  - export RDIFFWEB_VERSION=$(python3 setup.py --version | tail -n 1)
  - echo RDIFFWEB_VERSION=$RDIFFWEB_VERSION
  # configure git & ssh
  - git config --global user.email "robot@ikus-soft.com"
  - git config --global user.name "IKUS Soft robot"
  - mkdir ~/.ssh && chmod 0700 ~/.ssh
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - echo "$GITLAB_MINARCA_DEPLOY_KEY" >> ~/.ssh/id_rsa
  - chmod 0600 ~/.ssh/id_rsa
  # Checkout minarca and upgrade version.
  - git clone git@gitlab.com:ikus-soft/minarca.git
  - cd minarca/
  - sed -i -e "s/\"rdiffweb==.*\"/\"rdiffweb==$RDIFFWEB_VERSION\"/g" minarca-server/setup.py
  - git add minarca-server/setup.py
  - git commit -m "Bump rdiffweb to v$RDIFFWEB_VERSION"
  - git push origin master
  